logging {
  level = "debug"
  format = "logfmt"
}

// Discovers all kubernetes pods.
// Relies on serviceAccountName=grafana-alloy in the pod spec for permissions.
discovery.kubernetes "pods" {
  selectors {
    field = "spec.nodeName=" + env("HOSTNAME")
    role = "pod"
  }
  role = "pod"
}

// Discovers all processes running on the node.
// Relies on a security context with elevated permissions for the alloy container (running as root).
// Relies on hostPID=true on the pod spec, to be able to see processes from other pods.
discovery.process "all" {
  // Merges kubernetes and process data (using container_id), to attach kubernetes labels to discovered processes.
  join = discovery.kubernetes.pods.targets
}

// Drops non-java processes and adjusts labels.
discovery.relabel "java" {
  targets = discovery.process.all.targets
  // Drops non-java processes.
  rule {
    source_labels = ["__meta_process_exe"]
    action = "keep"
    regex = ".*/java$"
  }
  // Sets up the service_name using the namespace and container names.
  rule {
    action = "replace"
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    target_label = "service_name"
  }
  // Sets up kubernetes labels (labels with the __ prefix are ultimately dropped).
  rule {
    action = "replace"
    source_labels = ["__meta_kubernetes_pod_node_name"]
    target_label = "node"
  }
  rule {
    action = "replace"
    source_labels = ["__meta_kubernetes_namespace"]
    target_label = "namespace"
  }
  rule {
    action = "replace"
    source_labels = ["__meta_kubernetes_pod_name"]
    target_label = "pod"
  }
  rule {
    action = "replace"
    source_labels = ["__meta_kubernetes_pod_container_name"]
    target_label = "container"
  }
  // Sets up the cluster label.
  // Relies on a pod-level annotation with the "cluster_name" name.
  // Alternatively it can be set up using external_labels in pyroscope.write.
  rule {
    action = "replace"
    source_labels = ["__meta_kubernetes_pod_annotation_cluster_name"]
    target_label = "cluster"
  }
}

// Attaches the Pyroscope profiler to the processes returned by the discovery.relabel component.
// Relies on a security context with elevated permissions for the alloy container (running as root).
// Relies on hostPID=true on the pod spec, to be able to access processes from other pods.
pyroscope.java "java" {
  profiling_config {
    interval = "15s"
    alloc = "512k"
    cpu = true
    lock = "10ms"
    sample_rate = 100
  }
  forward_to = [pyroscope.write.main.receiver]
  targets = discovery.relabel.java.output
}

pyroscope.write "main" {
  endpoint {
    url = "http://pyroscope-headless.monitoring.svc.cluster.local:4040"
  }
}
