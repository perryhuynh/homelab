---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/source.toolkit.fluxcd.io/ocirepository_v1.json
apiVersion: source.toolkit.fluxcd.io/v1
kind: OCIRepository
metadata:
  name: kube-prometheus-stack
spec:
  interval: 5m
  layerSelector:
    mediaType: application/vnd.cncf.helm.chart.content.v1.tar+gzip
    operation: copy
  ref:
    tag: 75.9.0
  url: oci://ghcr.io/prometheus-community/charts/kube-prometheus-stack
---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 30m
  timeout: 15m
  chartRef:
    kind: OCIRepository
    name: kube-prometheus-stack
  install:
    crds: CreateReplace
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    crds: CreateReplace
    remediation:
      retries: 3
  values:
    crds:
      enabled: true
      upgradeJob:
        enabled: true
        forceConflicts: true
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      alertmanagerSpec:
        useExistingSecret: true
        configSecret: alertmanager-secret
        resources:
          limits:
            memory: 256Mi
          requests:
            cpu: 10m
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 1Gi
    grafana:
      enabled: false
      forceDeployDashboards: true
    kubeApiServer:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Drop high cardinality labels
          - action: drop
            sourceLabels:
              - "__name__"
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
          - action: drop
            sourceLabels:
              - "__name__"
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
    kubeControllerManager:
      enabled: false
    kubeEtcd:
      enabled: false
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Drop high cardinality labels
          - action: labeldrop
            regex: (uid)
          - action: labeldrop
            regex: (id|name)
          - action: drop
            sourceLabels:
              - "__name__"
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)
    kubeProxy:
      enabled: false
    kubeScheduler:
      enabled: false
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    prometheusOperator:
      resources:
        limits:
          memory: 128Mi
        requests:
          cpu: 10m
      prometheusConfigReloader:
        resources:
          limits:
            memory: 32Mi
          requests:
            cpu: 10m
    prometheus:
      route:
        main:
          enabled: true
          hostnames:
            - "prometheus.perryhuynh.com"
          parentRefs:
            - name: internal
              namespace: kube-system
              sectionName: https
      prometheusSpec:
        image:
          registry: docker.io
          repository: prompp/prompp
          tag: 2.53.2-0.3.3
        securityContext:
          runAsNonRoot: true
          runAsUser: 64535
          runAsGroup: 64535
          fsGroup: 64535
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        resources:
          limits:
            memory: 2Gi
          requests:
            cpu: 100m
        retention: 14d
        retentionSize: 50GB
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 50Gi
        additionalScrapeConfigs:
          - job_name: node-exporter
            metrics_path: /metrics
            static_configs:
              - targets:
                  - nas.home.arpa:9100
                  - pikvm.home.arpa:9100
          - job_name: smartctl-exporter
            metrics_path: /metrics
            static_configs:
              - targets:
                  - nas.home.arpa:9633
          - job_name: pikvm
            metrics_path: /api/export/prometheus/metrics
            static_configs:
              - targets:
                  - pikvm.home.arpa
          - job_name: pc
            metrics_path: /metrics
            static_configs:
              - targets:
                  - perry-desktop.home.arpa:9182

    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    additionalPrometheusRulesMap:
      dockerhub-rules:
        groups:
          - name: dockerhub
            rules:
              - alert: DockerhubRateLimitRisk
                annotations:
                  summary: Kubernetes cluster Dockerhub rate limit risk
                expr: count(time() - container_last_seen{image=~"(docker.io).*",container!=""} < 30) > 100
                labels:
                  severity: critical
      longhorn-rules:
        groups:
          - name: longhorn
            namespace: kube-system.rules
            rules:
              - alert: LonghornVolumeActualSpaceUsedWarning
                annotations:
                  description: The actual space used by Longhorn volume {{$labels.volume}} on {{$labels.node}} is at {{$value}}% capacity for more than 5 minutes.
                  summary: The actual used space of Longhorn volume is over 150% of the capacity.
                expr: (longhorn_volume_actual_size_bytes / longhorn_volume_capacity_bytes) * 100 > 150
                for: 5m
                labels:
                  issue: The actual used space of Longhorn volume {{$labels.volume}} on {{$labels.node}} is high.
                  severity: warning
              - alert: LonghornVolumeStatusCritical
                annotations:
                  description: Longhorn volume {{$labels.volume}} on {{$labels.node}} is Fault for more than 2 minutes.
                  summary: Longhorn volume {{$labels.volume}} is Fault
                expr: longhorn_volume_robustness == 3
                for: 5m
                labels:
                  issue: Longhorn volume {{$labels.volume}} is Fault.
                  severity: critical
              - alert: LonghornVolumeStatusWarning
                annotations:
                  description: Longhorn volume {{$labels.volume}} on {{$labels.node}} is Degraded for more than 5 minutes.
                  summary: Longhorn volume {{$labels.volume}} is Degraded
                expr: longhorn_volume_robustness == 2
                for: 5m
                labels:
                  issue: Longhorn volume {{$labels.volume}} is Degraded.
                  severity: warning
              - alert: LonghornNodeStorageWarning
                annotations:
                  description: The used storage of node {{$labels.node}} is at {{$value}}% capacity for more than 5 minutes.
                  summary: The used storage of node is over 70% of the capacity.
                expr: (longhorn_node_storage_usage_bytes / longhorn_node_storage_capacity_bytes) * 100 > 70
                for: 5m
                labels:
                  issue: The used storage of node {{$labels.node}} is high.
                  severity: warning
              - alert: LonghornDiskStorageWarning
                annotations:
                  description: The used storage of disk {{$labels.disk}} on node {{$labels.node}} is at {{$value}}% capacity for more than 5 minutes.
                  summary: The used storage of disk is over 70% of the capacity.
                expr: (longhorn_disk_usage_bytes / longhorn_disk_capacity_bytes) * 100 > 70
                for: 5m
                labels:
                  issue: The used storage of disk {{$labels.disk}} on node {{$labels.node}} is high.
                  severity: warning
              - alert: LonghornNodeDown
                annotations:
                  description: There are {{$value}} Longhorn nodes which have been offline for more than 5 minutes.
                  summary: Longhorn nodes is offline
                expr: (avg(longhorn_node_count_total) or on() vector(0)) - (count(longhorn_node_status{condition="ready"} == 1) or on() vector(0)) > 0
                for: 5m
                labels:
                  issue: There are {{$value}} Longhorn nodes are offline
                  severity: critical
              - alert: LonghornIntanceManagerCPUUsageWarning
                annotations:
                  description: Longhorn instance manager {{$labels.instance_manager}} on {{$labels.node}} has CPU Usage / CPU request is {{$value}}% for more than 5 minutes.
                  summary: Longhorn instance manager {{$labels.instance_manager}} on {{$labels.node}} has CPU Usage / CPU request is over 300%.
                expr: (longhorn_instance_manager_cpu_usage_millicpu/longhorn_instance_manager_cpu_requests_millicpu) * 100 > 300
                for: 5m
                labels:
                  issue: Longhorn instance manager {{$labels.instance_manager}} on {{$labels.node}} consumes 3 times the CPU request.
                  severity: warning
              - alert: LonghornNodeCPUUsageWarning
                annotations:
                  description: Longhorn node {{$labels.node}} has CPU Usage / CPU capacity is {{$value}}% for more than 5 minutes.
                  summary: Longhorn node {{$labels.node}} experiences high CPU pressure for more than 5m.
                expr: (longhorn_node_cpu_usage_millicpu / longhorn_node_cpu_capacity_millicpu) * 100 > 90
                for: 5m
                labels:
                  issue: Longhorn node {{$labels.node}} experiences high CPU pressure.
                  severity: warning
      oom-rules:
        groups:
          - name: oom
            rules:
              - alert: OomKilled
                annotations:
                  summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.
                expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
                labels:
                  severity: critical
      zfs-rules:
        groups:
          - name: zfs
            rules:
              - alert: ZfsUnexpectedPoolState
                annotations:
                  summary: ZFS pool {{$labels.zpool}} on {{$labels.instance}} is in a unexpected state {{$labels.state}}
                expr: node_zfs_zpool_state{state!="online"} > 0
                labels:
                  severity: critical
  postRenderers:
    - kustomize:
        patches:
          - target:
              version: v1
              kind: ConfigMap
              labelSelector: grafana_dashboard in (1)
            patch: |-
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: not-used
                namespace: not-used
                annotations:
                  grafana_folder: Kubernetes
