---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/external-secrets.io/externalsecret_v1.json
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: cross-seed-secret
spec:
  refreshInterval: 5m
  secretStoreRef:
    kind: ClusterSecretStore
    name: onepassword-connect
  target:
    template:
      data:
        config.js: |
          function fetchIndexers(baseUrl, apiKey, tag){
            const buffer = require('child_process').execSync(`curl -fsSL "$${baseUrl}/api/v1/tag/detail?apikey=$${apiKey}"`);
            const response = JSON.parse(buffer.toString('utf8'));
            const indexerIds = response.filter(t => t.label === tag)[0]?.indexerIds ?? [];
            const indexers = indexerIds.map(i => `$${baseUrl}/$${i}/api?apikey=$${apiKey}`);
            console.log(`Loaded $${indexers.length} indexers from Prowlarr`);
            return indexers;
          }
          module.exports = {
            action: "inject",
            apiKey: "{{ .cross_seed_api_key }}",
            blockList: ["category:manual"],
            linkCategory: "cross-seed",
            linkDirs: ["/downloads/cross-seed"],
            linkType: "hardlink",
            matchMode: "partial",
            port: Number(process.env.CROSS_SEED_PORT),
            skipRecheck: true,
            radarr: ["http://radarr.media.svc.cluster.local/?apikey={{ .radarr_api_key }}"],
            sonarr: ["http://sonarr.media.svc.cluster.local/?apikey={{ .sonarr_api_key }}"],
            torrentClients: ["qbittorrent:http://qbittorrent.media.svc.cluster.local"],
            torznab: fetchIndexers("http://prowlarr.media.svc.cluster.local", "{{ .prowlarr_api_key }}", "cross-seed"),
            useClientTorrents: true
          };
  dataFrom:
    - extract:
        key: cross-seed
      rewrite:
        - regexp:
            source: "(.*)"
            target: "cross_seed_$1"
    - extract:
        key: prowlarr
      rewrite:
        - regexp:
            source: "(.*)"
            target: "prowlarr_$1"
    - extract:
        key: radarr
      rewrite:
        - regexp:
            source: "(.*)"
            target: "radarr_$1"
    - extract:
        key: sonarr
      rewrite:
        - regexp:
            source: "(.*)"
            target: "sonarr_$1"
